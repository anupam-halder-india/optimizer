name: CMake

on:
  push:
    branches: [ "master" ]
    paths-ignore:
      - '*.md' 
      - '*.MD'
      - '*ignore'
      - '.github/*'
      - '!.github/workflows/*'
      - 'build'
      - '.devcontainer/*'

  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
  repository_dispatch:

env:
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

jobs: 
  configrations:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]

    outputs:
      runs-on: ${{ matrix.os }}

    runs-on: ${{ matrix.os }}
    steps:
    - name: setting up action chechout
      uses: actions/checkout@v3

    - name: Check for source code changes
      id: checking-changes
      shell: bash
      run: |
        if git status --porcelain | grep -E "^(M|A|D) (src/|CMakeLists.txt$)"; then
          echo "Changes detected in src and CMakeLists.txt"
          echo "changes=true >> $GITHUB_STATE"
        else
          echo "No changes in src and CMakeLists.txt"
          echo "changes=false >> $GITHUB_OUTPUT"
        fi

  node:
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    needs: configrations
    steps:
    - name: Use Node.js 18 for caching
      if: steps.checking-changes.outputs.changes == 'false'
      uses: actions/setup-node@v2
      with:
        node-version: '18'

  docker:
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    needs: configrations
    steps:
    - name: Login to Docker Hub
      if: steps.checking-changes.outputs.changes == 'false'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up Docker Buildx
      if: steps.checking-changes.outputs.changes == 'false'
      uses: docker/setup-buildx-action@v2

  cmake:
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    needs: configrations
    steps:
    - name: Setting up CMake
      if: steps.checking-changes.outputs.changes == 'false'
      uses: lukka/get-cmake@latest
      with:
        cmakeVersion: latestrc
        ninjaVersion: latest
      
  bulding:
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    needs: [cmake, node, docker, configrations]
    steps:
    - name: caching start
      if: steps.checking-changes.outputs.changes == 'false' && steps.cache.outputs.cache-hit == 'true'
      id: restore-cache
      uses: actions/cache@v2
      with:
        path: |
          build/CMakeCache.txt
          build/CMakeFiles
          artifacts/
        key: ${{ runner.os }}-action-cache-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('**/*.cpp') }}-${{ hashFiles('**/**/*.cpp') }}-${{ hashFiles('**/*.h') }}-${{ hashFiles('**/**/*.h') }}-${{ hashFiles('Dockerfile') }}-${{ github.run_id }} 

    - name: Configure and bulding CMake ninja
      if: steps.checking-changes.outputs.changes == 'false'
      shell: bash
      run: |
        sudo apt install libcurl4-openssl-dev -y
        rm -rf build
        mkdir build
        cmake -GNinja ${{github.workspace}}/build -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=../bin
        cmake --build build
      env:
        CMAKE_PREFIX_PATH: /usr/local
      
#   - name: Test
#     if: steps.checking-changes.outputs.changes == 'false'
#     working-directory: ${{github.workspace}}/build
#     shell: bash
       # Execute tests defined by the CMake configuration.
       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#     run: ctest

    - name: Docker containerization
      if: steps.checking-changes.outputs.changes == 'false'
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/optimizer:latest

    - name: Check if workflow run failed
      if: steps.checking-changes.outputs.changes == 'false'
      id: check-failure
      run: |
        if [ "${{ job.status }}" != "success" ]; then
          echo "Workflow run failed."
          echo "artifacts/${{ github.workflow }}-artifact-${{ github.run_number }}" > action-artifact.txt
        else
          echo "Workflow run was successful."
        fi
      shell: bash

    - name: Create the artifacts folder
      shell: bash
      if: steps.checking-changes.outputs.changes == 'false'
      run: mkdir artifacts

    - name: Create Artifact File
      if: steps.checking-changes.outputs.changes == 'false' && steps.check-failure.outputs.result == 'true'
      shell: bash
      run: |
        artifact_name=$(cat artifact_name.txt)
        echo "This is the content of the artifact" > "$artifact_name"

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      if: steps.checking-changes.outputs.changes == 'false'
      with:
        name: failure-artifact
        path: ${{ steps.generate-artifact-name.outputs.stdout }}

    - name: Save Action Cache
      if: steps.checking-changes.outputs.changes == 'false'
      uses: actions/cache@v2
      with:
        path: |
          build/CMakeCache.txt
          build/CMakeFiles
          artifacts
        key: ${{ runner.os }}-action-cache-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('**/*.cpp') }}-${{ hashFiles('**/**/*.cpp') }}-${{ hashFiles('**/*.h') }}-${{ hashFiles('**/**/*.h') }}-${{ hashFiles('Dockerfile') }}-${{ github.run_id }}
