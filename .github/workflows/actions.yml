name: Actions

on:
  push:
    branches: [ "master" ]
    paths-ignore:
      - '*.md' 
      - '*.MD'
      - '*ignore'
      - '.github/*'
      - '!.github/workflows/*'
      - 'build'
      - '.devcontainer/*'
      - 'github/**/*' 
      - 'github/**/**/*' 

  pull_request:
    branches: [ "master" ]
  schedule:
  - cron: '0 0 * * *'
  workflow_dispatch:
  repository_dispatch:

env:
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

jobs: 
  configrations:
    name: Configrations
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]

    outputs:
      runs-on: ${{ matrix.os }}
      changes: ${{ steps.checking-changes.outputs.changes }}
      skip_run: ${{ steps.check-schedule.outputs.skip_run }}

    runs-on: ${{ matrix.os }}
    steps:
    - name: setting up action chechout
      uses: actions/checkout@v3

    - name: Check if triggered by schedule
      id: check-schedule
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "schedule" ]]; then
          echo "Action triggered by schedule, skipping the run."
          echo "skip_run=true" >> $GITHUB_OUTPUT
        else
          echo "Action not triggered by schedule, proceeding with the run."
          echo "skip_run=false" >> $GITHUB_OUTPUT
        fi

    - name: Check for source code changes
      id: checking-changes
      shell: bash
      run: |
        git rev-parse --verify HEAD^ >/dev/null 2>&1 && git diff --name-only HEAD^ HEAD | grep -E "^(src/|CMakeLists.txt$)" > changed_files.txt || git ls-tree -r HEAD --name-only | grep -E "^(src/|CMakeLists.txt$)" > changed_files.txt

        if [ -s "changed_files.txt" ]; then
          # Read the content of the file into a variable
          changes=$(cat "changed_files.txt")
          # Check if the variable contains any content
          if [ -n "$changes" ]; then
            echo "Changes detected in src and CMakeLists.txt"
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "No changes in src and CMakeLists.txt"
            echo "changes=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "No changes in src and CMakeLists.txt"
          echo "changes=false" >> $GITHUB_OUTPUT
        fi

  node:
    name: Node
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    needs: configrations
    if: needs.configrations.outputs.changes == 'true' && needs.configrations.outputs.skip_run == 'false'
    steps:
    - name: Use Node.js 18 for caching
      uses: actions/setup-node@v3
      with:
        node-version: '18'

  docker:
    name: Docker Setup
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    needs: configrations
    if: needs.configrations.outputs.changes == 'true' && needs.configrations.outputs.skip_run == 'false' && github.event_name != 'pull_request'
    steps:
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

  cmake:
    name: CMake Setup
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    needs: configrations
    if: needs.configrations.outputs.changes == 'true' && needs.configrations.outputs.skip_run == 'false'
    steps:
    - name: Setting up CMake
      uses: lukka/get-cmake@latest
      with:
        cmakeVersion: latestrc
        ninjaVersion: latest

  chocolatey:
    name: Chocolatey Setup
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    needs: configrations
    if: needs.configrations.outputs.changes == 'true' && needs.configrations.outputs.skip_run == 'false'
    steps:
    - name: Chocolatey Action
      uses: crazy-max/ghaction-chocolatey@v2.2.0
      with:
        args: -y

  cloging:
    name: Cloging
    needs: [configrations, node, docker, cmake, chocolatey]
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    if: needs.configrations.outputs.changes == 'true' && ne
eds.configrations.outputs.skip_run == 'false'
    steps:
    - name: Conformation
      run: echo "the clog is running sucessfully"

  start-caching:
    name: Cache start
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    needs: [configrations, node, cloging]
    if: needs.configrations.outputs.changes == 'true' && needs.configrations.outputs.skip_run == 'false' && github.event_name != 'pull_request'
    steps:
    - name: caching start
      id: restore-cache
      uses: actions/cache@v3
      with:
        path: |
          build/CMakeCache.txt
          build/CMakeFiles
        key: ${{ runner.os }}-action-cache-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('**/*.cpp') }}-${{ hashFiles('**/**/*.cpp') }}-${{ hashFiles('**/*.h') }}-${{ hashFiles('**/**/*.h') }}-${{ hashFiles('Dockerfile') }}-${{ github.run_id }}

  build:
    name: Buliding
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    needs: [configrations, cmake, chocolatey, cloging, start-caching]
    if: needs.configrations.outputs.changes == 'true' && needs.configrations.outputs.skip_run == 'false'
    steps:
    - name: Configure and bulding CMake ninja
      shell: bash
      run: |
        choco install curl
        rm -rf build
        mkdir build
        cd build
        cmake -GNinja .. -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=../bin
        cmake --build .
      env:
        CMAKE_PREFIX_PATH: /usr/local

  containerization:
    name: Containerization
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    if: needs.configrations.outputs.changes == 'true' && needs.configrations.outputs.skip_run == 'false' && github.event_name != 'pull_request'
    needs: [configrations, docker, cloging, build]
    steps:
    - name: Docker containerization
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/optimizer:latest

  end-caching:
    name: Cache Ending
    if: needs.configrations.outputs.changes == 'true' && needs.configrations.outputs.skip_run == 'false' && github.event_name != 'pull_request'
    needs: [configrations, node, cloging, start-caching, build]
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    steps:
    - name: Save Action Cache
      uses: actions/cache@v3
      with:
        path: |
          build/CMakeCache.txt
          build/CMakeFiles
          artifacts
        key: ${{ runner.os }}-action-cache-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('**/*.cpp') }}-${{ hashFiles('**/**/*.cpp') }}-${{ hashFiles('**/*.h') }}-${{ hashFiles('**/**/*.h') }}-${{ hashFiles('Dockerfile') }}-${{ github.run_id }}

# testing:
#   name: Test
#   runs-on: ${{ needs.configrations.outputs.runs-on }}
#   needs: [configrations, cmake, cloging, build]
#   steps:
#   - name: Test
#     if: needs.configrations.outputs.changes == 'true' && needs.configrations.outputs.skip_run == 'false'
#     working-directory: ${{github.workspace}}/build
#     shell: bash
       # Execute tests defined by the CMake configuration.
       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#     run: ctest

  anylize:
    name: Anylize
    if: needs.configrations.outputs.changes == 'true' && needs.configrations.outputs.skip_run == 'true'
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners
    # Consider using larger runners for possible analysis time improvements.
    needs: [configrations, chocolatey, cloging, build] # add 'testing' when you finish building up the test
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        languages: ['cpp']
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    steps:
    - name: Initialize CodeQL 
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.languages }}

    # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
    # If this step fails, then you should remove it and run the build manually (see below)

    - name: build
      shell: bash
      run: |
        choco install curl
        rm -rf build
        mkdir build
        cd build 
        cmake -GNinja .. -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=../bin
        cmake --build .

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"
