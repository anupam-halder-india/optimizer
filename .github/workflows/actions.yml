name: Actions

on:
  push:
    branches: [ "master" ]
    paths-ignore:
      - '*.md'
      - '*.MD'
      - '*ignore'
      - '.github/*'
      - '!.github/workflows/*'
      - '.devcontainer/*'
      - 'github/**/*'
      - 'github/**/**/*'

  pull_request:
    branches: [ "master" ]
  schedule:
  - cron: '0 0 * * *'
  workflow_dispatch:
  repository_dispatch:

env:
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
  DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}
  DEFAULT_BRANCH: master
  GITHUB_TOKEN: ${{ secrets.THE_GITHUB_ADMIN_TOKEN }}

permissions: write-all

jobs:
  configrations:
    name: Configrations
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        trx: [ ubuntu-latest, windows-latest ]
        lix: [ ubuntu-latest, macOS-latest ]
        languages: ['cpp']

    outputs:
      runs-on: ${{ matrix.os }}
      changes: ${{ steps.changes.outputs.files }}
      skip_run: ${{ steps.check-schedule.outputs.skip_run }}
      trex: ${{ matrix.trx }}
      linx: ${{ matrix.lix }}
      languages: ${{ matrix.languages }}
      BFCH: ${{ steps.before-commit-hash.outputs.BEFORE_COMMIT_HASH }}

    runs-on: ${{ matrix.os }}
    steps:
      - name: setting up action checkout
        uses: actions/checkout@v3

      - name: Before commit hash
        id: before-commit-hash
        shell: bash
        run: |
          echo "BEFORE_COMMIT_HASH=${{ github.event.before }}" >> $GITHUB_OUTPUT
          BEFORE_COMMIT_HASH=${{ github.event.before }}
          echo "Before commit hash: $BEFORE_COMMIT_HASH"

      - name: Source Code changes detection
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            files:
              - 'src/**'

      - name: Upload artifact
        if: failure()
        uses: actions/upload-pages-artifact@v2

  page-build:
    runs-on: ubuntu-latest
    needs: configrations
    concurrency:
      group: "pages"
      cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2

  # Deployment job
  page-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    if: github.event_name != 'pull_request'
    needs: [configrations, page-build]
    concurrency:
      group: "pages"
      cancel-in-progress: false
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./

      - name: Upload artifact
        if: failure()
        uses: actions/upload-pages-artifact@v2

  branch-deletion:
    name: marged branch deletion
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    needs: configrations
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    steps:
    - name: branch deletion
      uses: SvanBoxel/delete-merged-branch@main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload artifact
      if: failure()
      uses: actions/upload-pages-artifact@v2

  node:
    name: Node
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    needs: configrations
    if: (github.event_name == 'pull_request' && needs.configurations.outputs.changes == 'true') || (github.event_name != 'pull_request' && github.event_name != 'schedule' && needs.configrations.outputs.changes == 'true')
    steps:
      - name: Use Node.js 18 for caching
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Upload artifact
        if: failure()
        uses: actions/upload-pages-artifact@v2

  artifact-deletion:
    name: Artifact Delation
    needs: configrations
    runs-on: ${{ needs.configrations.outputs.runs-on }}
   # if: github.event_name == 'schedule'
    steps:
      - name: Delete Artifacts
        uses: actions/github-script@v4
        with:
          script: |
            const octokit = context.octokit;

            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const runId = context.runId;

            const artifacts = await octokit.actions.listWorkflowRunArtifacts({
              owner,
              repo,
              run_id: runId
            });

            for (const artifact of artifacts.data.artifacts) {
              await octokit.actions.deleteArtifact({
                owner,
                repo,
                artifact_id: artifact.id
              });
            }

  python:
    name: Python
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    needs: configrations
    if: (github.event_name == 'pull_request' && needs.configurations.outputs.changes == 'true') || (github.event_name != 'pull_request' && github.event_name != 'schedule' && needs.configrations.outputs.changes == 'true')
    steps:
      - name: Installing Python
        uses: actions/setup-python@v4
        with:
          python-version: 'x'

      - name: Upload artifact
        if: failure()
        uses: actions/upload-pages-artifact@v2

  cmake:
    name: CMake Setup
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    needs: configrations
    if: (github.event_name == 'pull_request' && needs.configurations.outputs.changes == 'true') || (github.event_name != 'pull_request' && github.event_name != 'schedule' && needs.configrations.outputs.changes == 'true')
    steps:
      - name: Setting up CMake
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: latestrc
          ninjaVersion: latest

      - name: Upload artifact
        if: failure()
        uses: actions/upload-pages-artifact@v2

  cloging:
    name: Cloging
    runs-on: ${{ needs.configrations.outputs.linx }}
    needs: [configrations, node, python, cmake]
    if: needs.configrations.outputs.changes == 'true' && github.event_name != 'schedule'
    steps:
      - name: Conformation
        shell: bash
        run: echo the clog is running sucessfully

      - name: Upload artifact
        if: failure()
        uses: actions/upload-pages-artifact@v2

  test-conversion:
    if: github.event_name != 'pull_request' || ( github.event_name == 'pull_request' && needs.configrations.outputs.changes == 'true' ) || (github.event_name != 'pull_request' && needs.configrations.outputs.changes == 'true')
    needs: configrations
    runs-on: ${{ needs.configrations.outputs.linx }}
    steps:
      - name: setting up action checkout
        uses: actions/checkout@v3

      - name: Report test-coverage to DeepSource
        shell: bash
        run: |
          cd $GITHUB_WORKSPACE
          if [ -d .git ]; then git init; fi
          curl https://deepsource.io/cli | sh
          ./bin/deepsource report --analyzer test-coverage --key cxx --value-file ./coverage.info

      - name: Upload artifact
        if: failure()
        uses: actions/upload-pages-artifact@v2

  linting:
    name: Linting
    if: (github.event_name == 'pull_request' && needs.configurations.outputs.changes == 'true') || (github.event_name != 'pull_request' && github.event_name != 'schedule' && needs.configrations.outputs.changes == 'true')
    needs: [configrations, cloging]
    runs-on: ubuntu-latest
    steps:
      - name: Lint Code Base
        uses: github/super-linter@v5

      - name: Upload artifact
        if: failure()
        uses: actions/upload-pages-artifact@v2

  start-caching:
    name: Cache start
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    needs: [configrations, node, cloging]
    if: needs.configrations.outputs.changes == 'true' && github.event_name != 'schedule' && github.event_name != 'pull_request'
    steps:
      - name: caching start
        id: restore-cache
        uses: actions/cache@v3
        with:
          path: |
            build/CMakeCache.txt
            build/CMakeFiles
          key: ${{ runner.os }}-action-cache-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('**/*.cpp') }}-${{ hashFiles('**/**/*.cpp') }}-${{ hashFiles('**/*.h') }}-${{ hashFiles('**/**/*.h') }}-${{ hashFiles('Dockerfile') }}-${{ github.run_id }}

      - name: Upload artifact
        if: failure()
        uses: actions/upload-pages-artifact@v2

  build:
    name: Buliding
    runs-on: ubuntu-latest
    needs: [configrations, python, cmake, cloging, linting, start-caching]
    if: needs.configrations.outputs.changes == 'true' && github.event_name != 'schedule'
    outputs:
      build-script: ${{ steps.build-steps.run }}
    steps:
      - name: setting up action checkout
        uses: actions/checkout@v3

      - name: Configure and bulding CMake ninja
        shell: bash
        id: build-steps
        run: |
          sudo apt-get install libcurl4-openssl-dev librpm-dev libapt-pkg-dev ninja-build -y
          pip install cpplint
          cd build && rm -rf *
          cmake .. -GNinja
          ninja cpplint

      - name: Upload artifact
        if: failure()
        uses: actions/upload-pages-artifact@v2

  containerization:
    name: Containerization with Docker
    runs-on: ${{ needs.configrations.outputs.linx }}
    if: needs.configrations.outputs.changes == 'true' && github.event_name != 'schedule' && github.event_name != 'pull_request'
    needs: [configrations, cloging, build]
    steps:
      - name: setting up action checkout
        uses: actions/checkout@v3

      - name: Inatalling Docker cli
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            sudo apt install ca-certificates curl gnupg
            sudo install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            sudo chmod a+r /etc/apt/keyrings/docker.gpg
            echo \
              "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
              "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
              sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt update
              sudo apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            brew update
            brew install --cask docker
          fi

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Debug Output
        run: |
          ls -R
          pwd
          echo "Contents of directory: $(ls)"

      - name: Docker containerization
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/optimizer:latest

      - name: Upload artifact
        if: failure()
        uses: actions/upload-pages-artifact@v2

  end-caching:
    name: Cache Ending
    if: needs.configrations.outputs.changes == 'true' && github.event_name != 'schedule' && github.event_name != 'pull_request'
    needs: [configrations, node, cloging, start-caching, build]
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    steps:
      - name: Save Action Cache
        uses: actions/cache@v3
        with:
          path: |
            build/CMakeCache.txt
            build/CMakeFiles
            artifacts
          key: ${{ runner.os }}-action-cache-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('**/*.cpp') }}-${{ hashFiles('**/**/*.cpp') }}-${{ hashFiles('**/*.h') }}-${{ hashFiles('**/**/*.h') }}-${{ hashFiles('Dockerfile') }}-${{ github.run_id }}

      - name: Upload artifact
        if: failure()
        uses: actions/upload-pages-artifact@v2

# testing:
#   name: Test
#   runs-on: ${{ needs.configrations.outputs.runs-on }}
#   needs: [configrations, cmake, cloging, build]
#   steps:
#     - name: setting up action checkout
#       uses: actions/checkout@v3

#     - name: Test
#       if: needs.configrations.outputs.changes == 'true' && github.event_name != 'schedule'
#       working-directory: ${{github.workspace}}/build
#       shell: bash
         # Execute tests defined by the CMake configuration.
         # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#       run: ctest
#     - name: Upload artifact
#       if: failure()
#       uses: actions/upload-pages-artifact@v2

  anylize:
    name: Anylize
    if: needs.configrations.outputs.changes == 'true' || github.event_name == 'schedule' || (github.event_name == 'pull_request' && needs.configrations.outputs.changes == 'true')
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners
    # Consider using larger runners for possible analysis time improvements.
    needs: [configrations, cmake, python, cloging, build] # add 'testing' when you finish building up the test
    runs-on: ubuntu-latest

    steps:
      - name: setting up action checkout
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ needs.configrations.outputs.languages }}

    # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
    # If this step fails, then you should remove it and run the build manually (see below)

      - name: Analysis Build
        shell: bash
        run: ${{ needs.build.outputs.build-script }}

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

      - name: Upload artifact
        if: failure()
        uses: actions/upload-pages-artifact@v2
