name: CMake

on:
  push:
    branches: [ "master" ]
    paths-ignore:
      - '*.md' 
      - '*.MD'
      - '*ignore'
      - '.github/*'
      - '!.github/workflows/*'
      - 'build'
      - '.devcontainer/*'
      - 'github/**/*' 
      - 'github/**/**/*' 

  pull_request:
    branches: [ "master" ]
  schedule:
  - cron: '0 0 * * *'
  workflow_dispatch:
  repository_dispatch:

env:
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

jobs: 
  configrations:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]

    outputs:
      runs-on: ${{ matrix.os }}

    runs-on: ${{ matrix.os }}
    steps:
    - name: setting up action chechout
      uses: actions/checkout@v3

    - name: Check if triggered by schedule
      id: check-schedule
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "schedule" ]]; then
          echo "Action triggered by schedule, skipping the run."
          echo "skip_run=true >> $GITHUB_STATE"
        else
          echo "Action not triggered by schedule, proceeding with the run."
          echo "skip_run=false >> $GITHUB_OUTPUT"
        fi

    - name: Check for source code changes
      id: checking-changes
      shell: bash
      run: |
        if git status --porcelain | grep -E "^(M|A|D) (src/|CMakeLists.txt$)"; then
          echo "Changes detected in src and CMakeLists.txt"
          echo "changes=true >> $GITHUB_STATE"
        else
          echo "No changes in src and CMakeLists.txt"
          echo "changes=false >> $GITHUB_OUTPUT"
        fi

  node:
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    needs: configrations
    steps:
    - name: Use Node.js 18 for caching
      if: steps.checking-changes.outputs.changes == 'true' && steps.check-schedule.outputs.skip_run == 'false'
      uses: actions/setup-node@v3
      with:
        node-version: '18'

  docker:
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    needs: configrations
    steps:
    - name: Login to Docker Hub
      if: steps.checking-changes.outputs.changes == 'true' && steps.check-schedule.outputs.skip_run == 'false'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up Docker Buildx
      if: steps.checking-changes.outputs.changes == 'true' && steps.check-schedule.outputs.skip_run == 'false'
      uses: docker/setup-buildx-action@v2

  cmake:
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    needs: configrations
    steps:
    - name: Setting up CMake
      if: steps.checking-changes.outputs.changes == 'true' && steps.check-schedule.outputs.skip_run == 'false'
      uses: lukka/get-cmake@latest
      with:
        cmakeVersion: latestrc
        ninjaVersion: latest
      
  build:
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    needs: [configrations, cmake]
    steps:
    - name: caching start
      if: steps.checking-changes.outputs.changes == 'true' && steps.cache.outputs.cache-hit == 'true' && steps.check-schedule.outputs.skip_run == 'false'
      id: restore-cache
      uses: actions/cache@v2
      with:
        path: |
          build/CMakeCache.txt
          build/CMakeFiles
          artifacts/
        key: ${{ runner.os }}-action-cache-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('**/*.cpp') }}-${{ hashFiles('**/**/*.cpp') }}-${{ hashFiles('**/*.h') }}-${{ hashFiles('**/**/*.h') }}-${{ hashFiles('Dockerfile') }}-${{ github.run_id }} 

    - name: Configure and bulding CMake ninja
      if: steps.checking-changes.outputs.changes == 'true' && steps.check-schedule.outputs.skip_run == 'false'
      shell: bash
      run: |
        sudo apt install libcurl4-openssl-dev -y
        rm -rf build
        mkdir build
        cd build
        cmake -GNinja .. -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=../bin
        cmake --build .
      env:
        CMAKE_PREFIX_PATH: /usr/local

  containerization:
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    needs: [configrations, docker, build]
    steps:
    - name: Docker containerization
      if: steps.checking-changes.outputs.changes == 'true' && steps.check-schedule.outputs.skip_run == 'false'
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/optimizer:latest
    - name: Save Action Cache
      if: steps.checking-changes.outputs.changes == 'true' && steps.check-schedule.outputs.skip_run == 'false'
      uses: actions/cache@v2
      with:
        path: |
          build/CMakeCache.txt
          build/CMakeFiles
          artifacts
        key: ${{ runner.os }}-action-cache-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('**/*.cpp') }}-${{ hashFiles('**/**/*.cpp') }}-${{ hashFiles('**/*.h') }}-${{ hashFiles('**/**/*.h') }}-${{ hashFiles('Dockerfile') }}-${{ github.run_id }}

# testing:
#   runs-on: ${{ needs.configrations.outputs.runs-on }}
#   needs: [configrations, cmake, build]
#   steps:
#   - name: Test
#     if: steps.checking-changes.outputs.changes == 'true' && steps.check-schedule.outputs.skip_run == 'false'
#     working-directory: ${{github.workspace}}/build
#     shell: bash
       # Execute tests defined by the CMake configuration.
       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#     run: ctest

  anylize:
    name: Anylize
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners
    # Consider using larger runners for possible analysis time improvements.
    needs: [configrations, build] # add 'testing' when you finish building up the test
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        languages: ['cpp']
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    steps:
    - name: Initialize CodeQL
      if: steps.checking-changes.outputs.changes == 'true' && steps.check-schedule.outputs.skip_run == 'true'
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.languages }}

    # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
    # If this step fails, then you should remove it and run the build manually (see below)

    - name: build
      if: steps.checking-changes.outputs.changes == 'true' && steps.check-schedule.outputs.skip_run == 'true'
      run: |
        sudo apt install libcurl4-openssl-dev -y                   rm -rf build                                               mkdir build                                                cd build                                                   cmake -GNinja .. -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=../bin
        cmake --build .

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines.
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    # - run: |
    #     echo "Run, Build Application using script"
    #     ./location_of_script_within_repo/buildscript.sh

    - name: Perform CodeQL Analysis
      if: steps.checking-changes.outputs.changes == 'true' && steps.check-schedule.outputs.skip_run == 'true'
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"
