name: Actions

on:
  push:
    branches: [ "master" ]
    paths-ignore:
      - '**/*.md'
      - '**/*.MD'
      - '!src/*'
      - '!CMakeLists.txt'
      - '!.cpplint'
      - '!.github/workflows/*'
      - '*'
      - '!build/'
      - 'build/*'
      - '!bin/'
      - '!.deepsource.toml'
  pull_request:
    branches: [ "master" ]
  schedule:
  - cron: '0 0 * * *'
  workflow_dispatch:
  repository_dispatch:

env:
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
  DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}
  DEFAULT_BRANCH: master
  GITHUB_TOKEN: ${{ secrets.THE_GITHUB_ADMIN_TOKEN }}

permissions: write-all

jobs:
  configrations:
    name: Configrations
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        trx: [ ubuntu-latest, windows-latest ]
        lix: [ ubuntu-latest, macOS-latest ]

    outputs:
      runs-on: ${{ matrix.os }}
      changes: ${{ steps.changes.outputs.files }}
      skip_run: ${{ steps.check-schedule.outputs.skip_run }}
      trex: ${{ matrix.trx }}
      linx: ${{ matrix.lix }}
      BFCH: ${{ steps.before-commit-hash.outputs.BEFORE_COMMIT_HASH }}

    runs-on: ${{ matrix.os }}
    steps:
      - name: setting up action checkout
        uses: actions/checkout@v3

      - name: Before commit hash
        id: before-commit-hash
        shell: bash
        run: |
          echo "BEFORE_COMMIT_HASH=${{ github.event.before }}" >> $GITHUB_OUTPUT
          BEFORE_COMMIT_HASH=${{ github.event.before }}
          echo "Before commit hash: $BEFORE_COMMIT_HASH"

      - name: Source Code changes detection
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            files:
              - 'src/**'

  page-build:
    runs-on: ubuntu-latest
    needs: configrations
    concurrency:
      group: "pages"
      cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2

  # Deployment job
  page-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    if: github.event_name != 'pull_request'
    needs: [configrations, page-build]
    concurrency:
      group: "pages"
      cancel-in-progress: false
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./

  branch-deletion:
    name: marged branch deletion
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    needs: configrations
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    steps:
    - name: branch deletion
      uses: SvanBoxel/delete-merged-branch@main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  node:
    name: Node
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    needs: configrations
    if: (github.event_name == 'pull_request' && needs.configurations.outputs.changes == 'true') || (github.event_name != 'pull_request' && github.event_name != 'schedule' && needs.configrations.outputs.changes == 'true')
    steps:
      - name: Use Node.js 18 for caching
        uses: actions/setup-node@v3
        with:
          node-version: '18'

  python:
    name: Python
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    needs: configrations
    if: (github.event_name == 'pull_request' && needs.configurations.outputs.changes == 'true') || (github.event_name != 'pull_request' && github.event_name != 'schedule' && needs.configrations.outputs.changes == 'true')
    steps:
      - name: Installing Python
        uses: actions/setup-python@v4
        with:
          python-version: 'x'

  cmake:
    name: CMake Setup
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    needs: configrations
    if: (github.event_name == 'pull_request' && needs.configurations.outputs.changes == 'true') || (github.event_name != 'pull_request' && github.event_name != 'schedule' && needs.configrations.outputs.changes == 'true')
    steps:
      - name: Setting up CMake
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: latestrc
          ninjaVersion: latest

  cloging:
    name: Cloging
    runs-on: ${{ needs.configrations.outputs.linx }}
    needs: [configrations, node, python, cmake]
    if: needs.configrations.outputs.changes == 'true' && github.event_name != 'schedule'
    steps:
      - name: Conformation
        shell: bash
        run: echo the clog is running sucessfully

  linting:
    name: Linting
    if: (github.event_name == 'pull_request' && needs.configurations.outputs.changes == 'true') || (github.event_name != 'pull_request' && github.event_name != 'schedule' && needs.configrations.outputs.changes == 'true')
    needs: [configrations, cloging]
    runs-on: ubuntu-latest
    steps:
      - name: Lint Code Base
        uses: github/super-linter@v5

  start-caching:
    name: Cache start
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    needs: [configrations, node, cloging]
    if: needs.configrations.outputs.changes == 'true' && github.event_name != 'schedule' && github.event_name != 'pull_request'
    steps:
      - name: caching start
        id: restore-cache
        uses: actions/cache@v3
        with:
          path: |
            build/CMakeCache.txt
            build/CMakeFiles
          key: ${{ runner.os }}-action-cache-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('**/*.cpp') }}-${{ hashFiles('**/**/*.cpp') }}-${{ hashFiles('**/*.h') }}-${{ hashFiles('**/**/*.h') }}-${{ hashFiles('Dockerfile') }}-${{ github.run_id }}

  build:
    name: Buliding
    runs-on: ubuntu-latest
    needs: [configrations, python, cmake, cloging, start-caching]
    if: needs.configrations.outputs.changes == 'true' && github.event_name != 'schedule'
    outputs:
      build-script: ${{ steps.build-steps.run }}
    steps:
      - name: setting up action checkout
        uses: actions/checkout@v3

      - name: Configure and bulding CMake ninja
        shell: bash
        id: build-steps
        run: |
          sudo apt-get update
          sudo apt-get install libcurl4-openssl-dev librpm-dev libapt-pkg-dev ninja-build -y
          pip install cpplint && mkdir -p build && cd build && rm -rf * && cmake .. -GNinja && ninja cpplint

  containerization:
    name: Containerization with Docker
    runs-on: ${{ needs.configrations.outputs.linx }}
    if: needs.configrations.outputs.changes == 'true' && github.event_name != 'schedule' && github.event_name != 'pull_request'
    needs: [configrations, cloging, build]
    steps:
      - name: setting up action checkout
        uses: actions/checkout@v3

      - name: docker setup
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
          docker buildx create --use

      - name: Docker containerization
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/optimizer:latest

  end-caching:
    name: Cache Ending
    if: needs.configrations.outputs.changes == 'true' && github.event_name != 'schedule' && github.event_name != 'pull_request'
    needs: [configrations, node, cloging, start-caching, build]
    runs-on: ${{ needs.configrations.outputs.runs-on }}
    steps:
      - name: Save Action Cache
        uses: actions/cache@v3
        with:
          path: |
            build/CMakeCache.txt
            build/CMakeFiles
            artifacts
          key: ${{ runner.os }}-action-cache-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('**/*.cpp') }}-${{ hashFiles('**/**/*.cpp') }}-${{ hashFiles('**/*.h') }}-${{ hashFiles('**/**/*.h') }}-${{ hashFiles('Dockerfile') }}-${{ github.run_id }}

# testing:
#   name: Test
#   runs-on: ${{ needs.configrations.outputs.runs-on }}
#   needs: [configrations, cmake, cloging, build]
#   steps:
#     - name: setting up action checkout
#       uses: actions/checkout@v3

#     - name: Test
#       if: needs.configrations.outputs.changes == 'true' && github.event_name != 'schedule'
#       working-directory: ${{github.workspace}}/build
#       shell: bash
         # Execute tests defined by the CMake configuration.
         # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#       run: ctest
