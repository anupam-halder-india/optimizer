name: CMake

on:
  push:
    branches: [ "master" ]
    paths-ignore:
      - '*.md' 
      - '*.MD'
      - '*ignore'
      - '.github/*'
      - '!.github/workflows/*'
      - 'build'
      - '.devcontainer/*'

  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
  repository_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: get-cmake
      uses: lukka/get-cmake@latest
      with:
        cmakeVersion: latestrc
        ninjaVersion: latest

    - name: Restore action Cache
      id: restore-cache
      uses: actions/cache@v2
      with:
        path: |
          build/CMakeCache.txt
          build/CMakeFiles
          artifacts/
        key: ${{ runner.os }}-action-cache-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('**/*.cpp') }}-${{ hashFiles('**/**/*.cpp') }}-${{ hashFiles('**/*.h') }}-${{ hashFiles('**/**/*.h') }}-${{ hashFiles('Dockerfile') }}-${{ github.run_id }}
      if: steps.cache.outputs.cache-hit == 'true'

    - name: Configure and bulding CMake ninja
      run: |
        sudo apt install libcurl4-openssl-dev -y
        rm -rf build
        mkdir build
        cd build
        cmake -GNinja .. -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=../bi
        cmake --build .
      env:
        CMAKE_PREFIX_PATH: /usr/local
      
#   - name: Test
#     working-directory: ${{github.workspace}}/build
       # Execute tests defined by the CMake configuration.
       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#     run: ctest

    - name: Docker containerization
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/optimizer:latest

    - name: Check if workflow run failed
      id: check-failure
      run: |
        if [ "${{ job.status }}" != "success" ]; then
          echo "Workflow run failed."
          echo "artifacts/${{ github.workflow }}-artifact-${{ github.run_number }}" > action-artifact.txt
        else
          echo "Workflow run was successful."
        fi
      shell: bash

    - name: Creat the artifacts folder
      run: mkdir artifacts

    - name: Create Artifact File
      if: steps.check-failure.outputs.result == 'true'
      run: |
        artifact_name=$(cat artifact_name.txt)
        echo "This is the content of the artifact" > "$artifact_name"
      shell: bash

    - name: Upload Artifact
      if: steps.check-failure.outputs.result == 'true'
      uses: actions/upload-artifact@v2
      with:
        name: failure-artifact
        path: ${{ steps.generate-artifact-name.outputs.stdout }}
    - name: Save Action Cache
      if: always()
      uses: actions/cache@v2
      with:
        path: |
          build/CMakeCache.txt
          build/CMakeFiles
          artifacts
        key: ${{ runner.os }}-action-cache-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('**/*.cpp') }}-${{ hashFiles('**/**/*.cpp') }}-${{ hashFiles('**/*.h') }}-${{ hashFiles('**/**/*.h') }}-${{ hashFiles('Dockerfile') }}-${{ github.run_id }}
