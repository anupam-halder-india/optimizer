name: CMake

on:
  push:
    branches: [ "master" ]
    paths-ignore:
      - '*.md' 
      - '*.MD'
      - '*ignore'
      - '.github/*'
      - '!.github/workflows/*'
      - 'build'
      - '.devcontainer/*'

  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
  repository_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
 
    - name: Configure CMake ninja
      run: |
        sudo apt install ninja-build libcurl4-openssl-dev -y
        rm -rf build
        mkdir build
        cd build
        cmake -GNinja .. -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=../bin

    - name: Build
      run: cmake --build build

#   - name: Test
#     working-directory: ${{github.workspace}}/build
       # Execute tests defined by the CMake configuration.
       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#     run: ctest

    - name: Docker containerization
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/optimizer:latest

  artifactification:
    name: Create Artifact on Failure
    runs-on: ubuntu-latest

    steps:
      - name: Check if workflow run failed
        id: check-failure
        run: |
          if [ "${{ job.status }}" != "success" ]; then
            echo "Workflow run failed."
            echo "artifacts/${{ github.workflow }}-artifact-${{ github.run_number }}" > action-artifact.txt
          else
            echo "Workflow run was successful."
          fi
        shell: bash

      - name: Creat the artifacts folder
        run: mkdir artifacts

      - name: Create Artifact File
        if: steps.check-failure.outputs.result == 'true'
        run: |
          artifact_name=$(cat artifact_name.txt)
          echo "This is the content of the artifact" > "$artifact_name"
        shell: bash

      - name: Upload Artifact
        if: steps.check-failure.outputs.result == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: failure-artifact
          path: ${{ steps.generate-artifact-name.outputs.stdout }}

  deartifactification:
    name: Delete Artifact on Success
    runs-on: ubuntu-latest

    steps:
      - name: Delete Artifacts
        if: always()
        run: |
          echo "Deleting artifacts..."
          find artifacts -type f -mmin +1440 -delete
        shell: bash
